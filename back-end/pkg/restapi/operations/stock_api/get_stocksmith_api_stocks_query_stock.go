// Code generated by go-swagger; DO NOT EDIT.

package stock_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetStocksmithAPIStocksQueryStockHandlerFunc turns a function with the right signature into a get stocksmith API stocks query stock handler
type GetStocksmithAPIStocksQueryStockHandlerFunc func(GetStocksmithAPIStocksQueryStockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStocksmithAPIStocksQueryStockHandlerFunc) Handle(params GetStocksmithAPIStocksQueryStockParams) middleware.Responder {
	return fn(params)
}

// GetStocksmithAPIStocksQueryStockHandler interface for that can handle valid get stocksmith API stocks query stock params
type GetStocksmithAPIStocksQueryStockHandler interface {
	Handle(GetStocksmithAPIStocksQueryStockParams) middleware.Responder
}

// NewGetStocksmithAPIStocksQueryStock creates a new http.Handler for the get stocksmith API stocks query stock operation
func NewGetStocksmithAPIStocksQueryStock(ctx *middleware.Context, handler GetStocksmithAPIStocksQueryStockHandler) *GetStocksmithAPIStocksQueryStock {
	return &GetStocksmithAPIStocksQueryStock{Context: ctx, Handler: handler}
}

/*GetStocksmithAPIStocksQueryStock swagger:route GET /stocksmith/api/stocks/queryStock Stock API getStocksmithApiStocksQueryStock

Querys information about a specific stock

Querys information about a specific stock

*/
type GetStocksmithAPIStocksQueryStock struct {
	Context *middleware.Context
	Handler GetStocksmithAPIStocksQueryStockHandler
}

func (o *GetStocksmithAPIStocksQueryStock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStocksmithAPIStocksQueryStockParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
