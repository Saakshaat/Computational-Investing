// Code generated by go-swagger; DO NOT EDIT.

package stock_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetStocksQueryStockHandlerFunc turns a function with the right signature into a get stocks query stock handler
type GetStocksQueryStockHandlerFunc func(GetStocksQueryStockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStocksQueryStockHandlerFunc) Handle(params GetStocksQueryStockParams) middleware.Responder {
	return fn(params)
}

// GetStocksQueryStockHandler interface for that can handle valid get stocks query stock params
type GetStocksQueryStockHandler interface {
	Handle(GetStocksQueryStockParams) middleware.Responder
}

// NewGetStocksQueryStock creates a new http.Handler for the get stocks query stock operation
func NewGetStocksQueryStock(ctx *middleware.Context, handler GetStocksQueryStockHandler) *GetStocksQueryStock {
	return &GetStocksQueryStock{Context: ctx, Handler: handler}
}

/*GetStocksQueryStock swagger:route GET /stocks/queryStock Stock API getStocksQueryStock

Querys information about a specific stock

Querys information about a specific stock

*/
type GetStocksQueryStock struct {
	Context *middleware.Context
	Handler GetStocksQueryStockHandler
}

func (o *GetStocksQueryStock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStocksQueryStockParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
